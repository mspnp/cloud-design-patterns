targetScope = 'resourceGroup'

@minLength(5)
@description('Location of the resources. Defaults to resource group location.')
param location string = resourceGroup().location


/*** EXISTING RESOURCES ***/

@description('Built-in Azure RBAC role that is applied to a Storage account to grant "Storage Blob Data Contributor" privileges. Used by the Azure Function to manage its own backend.')
resource storageBlobDataContributorRole 'Microsoft.Authorization/roleDefinitions@2022-04-01' existing = {
  name: 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'
  scope: subscription()
}

/*** NEW RESOURCES ***/

resource workloadLogs 'Microsoft.OperationalInsights/workspaces@2023-09-01' = {
  name: 'la-logs'
  location: location
  properties: {
    publicNetworkAccessForIngestion: 'Enabled'
    publicNetworkAccessForQuery: 'Enabled'
    sku: {
      name: 'PerGB2018'
    }
    retentionInDays: 30
    features: {
      enableLogAccessUsingOnlyResourcePermissions: true
    }
    workspaceCapping: {
      dailyQuotaGb: -1
    }
  }
}

resource appInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: 'ai-logs'
  location: location
  kind: 'web'
  properties: {
    Application_Type: 'web'
    DisableIpMasking: true
    WorkspaceResourceId: workloadLogs.id
    publicNetworkAccessForIngestion: 'Enabled'
    publicNetworkAccessForQuery: 'Enabled'
    DisableLocalAuth: false
  }
}

@description('The Azure Storage account which will support the operation of the Azure Function app. Including hosting the .zip file for the RunFromPackage deployment.')
resource functionStorageAccount 'Microsoft.Storage/storageAccounts@2023-01-01' = {
  name: 'stfnbackend'
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    accessTier: 'Hot'
    allowBlobPublicAccess: true
    allowCrossTenantReplication: false
    allowSharedKeyAccess: false   // This storage account is configured to only work with Microsoft Entra ID authentication
    isLocalUserEnabled: false
    isHnsEnabled: false
    isNfsV3Enabled: false
    isSftpEnabled: false
    largeFileSharesState: 'Disabled'
    minimumTlsVersion: 'TLS1_2'
    publicNetworkAccess: 'Enabled'   // This sample does not use private networking, but could be configured to use Private Link connections if fully deploy to Azure
    supportsHttpsTrafficOnly: true
    defaultToOAuthAuthentication: true
  }

  resource blobContainers 'blobServices' = {
    name: 'default'
    
    resource images 'containers' = {
      name: 'function-deployments'
    }
  }
}

@description('The Azure Storage account which will be where authorized clients upload images to. The function will hand out scoped, time-limited SaS tokens for this account.')
resource imageStorageAccount 'Microsoft.Storage/storageAccounts@2023-01-01' = {
  name: 'stimages'
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    accessTier: 'Hot'
    allowBlobPublicAccess: true
    allowCrossTenantReplication: false
    allowSharedKeyAccess: true   // This storage account is configured to allow SaS tokens, which will be generated by the Azure Function and provided to clients
    isLocalUserEnabled: false
    isHnsEnabled: false
    isNfsV3Enabled: false
    isSftpEnabled: false
    largeFileSharesState: 'Disabled'
    minimumTlsVersion: 'TLS1_2'
    publicNetworkAccess: 'Enabled'   // This sample does not use private networking, but could be configured to use Private Link connections if fully deploy to Azure
    supportsHttpsTrafficOnly: true
    defaultToOAuthAuthentication: true
  }

  resource blobContainers 'blobServices' = {
    name: 'default'
    
    resource images 'containers' = {
      name: 'uploads'
    }
  }
}

resource functionHostingPlan 'Microsoft.Web/serverfarms@2023-01-01' = {
  name: 'serverfarm'
  location: location
  sku: {
    name: 'Y1'
    tier: 'Dynamic'
  }
  kind: 'functionapp'
  properties: {
    reserved: true
  }
}

resource functionApp 'Microsoft.Web/sites@2023-01-01' = {
  name: 'functionappck04'
  location: location
  kind: 'functionapp,linux'
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    serverFarmId: functionHostingPlan.id
    clientAffinityEnabled: false
    clientCertEnabled: false
    httpsOnly: true
    publicNetworkAccess: 'Enabled'
    siteConfig: {
      appSettings: [
        {
          name: 'FUNCTIONS_EXTENSION_VERSION'
          value: '~4'
        }
        {
          name: 'FUNCTIONS_WORKER_RUNTIME'
          value: 'dotnet-isolated'
        }
        {
          name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
          value: appInsights.properties.ConnectionString
        }
        {
          name: 'AzureWebJobsStorage__accountName'
          value: functionStorageAccount.name
        }
      ]
      alwaysOn: false
      use32BitWorkerProcess: false
      linuxFxVersion: 'DOTNET-ISOLATED|8.0'
      http20Enabled: true
      httpLoggingEnabled: true
      localMySqlEnabled: false
      minTlsVersion: '1.2'
      remoteDebuggingEnabled: false
      
      ftpsState: 'Disabled'
    }
    virtualNetworkSubnetId: null
  }

  resource creds 'basicPublishingCredentialsPolicies' = {
    name: 'scm'
    properties: {
      allow: false
    }
  }
}

resource blobContributor 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(functionApp.id, functionStorageAccount.id, storageBlobDataContributorRole.id)
  scope: functionStorageAccount
  properties: {
    principalId: functionApp.identity.principalId
    roleDefinitionId: storageBlobDataContributorRole.id
    principalType: 'ServicePrincipal'
    description: 'Replaces the need for key-based access to the storage account for Azure Functions'
  }
}
